name: Deploy to Linux Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  BUILD_DIR: 'dist'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # - name: Run linter
    #   run: npm run lint

    - name: Build application
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        PAYSTACK_SECRET_KEY: ${{ secrets.PAYSTACK_SECRET_KEY }}
        PAYSTACK_PUBLIC_KEY: ${{ secrets.PAYSTACK_PUBLIC_KEY }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: ${{ env.BUILD_DIR }}/
        retention-days: 1

  docker-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Debug connection
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}
      run: |
        echo "Testing connection to server..."
        echo "SERVER_HOST: ${{ secrets.SERVER_HOST }}"
        echo "SERVER_USER: ${{ secrets.SERVER_USER }}"
        sshpass -e ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'Connection successful!'"

    - name: Deploy and build Docker image on server
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}
      run: |
        # Upload source code to server using sshpass
        sshpass -e rsync -avz --delete . ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/flexibug-beauty/
        
        # Build and run Docker image on server using sshpass
        sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd /tmp/flexibug-beauty
          
          # Stop and remove existing container
          docker stop flexibug-beauty || true
          docker rm flexibug-beauty || true
          
          # Remove old image to save space
          docker rmi flexibug-beauty:latest || true
          
          # Build Docker image locally on server
          echo '🐳 Building Docker image on server...'
          docker build -t flexibug-beauty:latest .
          
          # Run new container with environment variables
          echo '🚀 Starting new container...'
          docker run -d \
            --name flexibug-beauty \
            --restart unless-stopped \
            -p 8080:80 \
            -p 8443:443 \
            -e NODE_ENV=production \
            -e VITE_SUPABASE_URL=\"${{ secrets.VITE_SUPABASE_URL }}\" \
            -e VITE_SUPABASE_ANON_KEY=\"${{ secrets.VITE_SUPABASE_ANON_KEY }}\" \
            -e SUPABASE_URL=\"${{ secrets.SUPABASE_URL }}\" \
            -e PAYSTACK_SECRET_KEY=\"${{ secrets.PAYSTACK_SECRET_KEY }}\" \
            -e PAYSTACK_PUBLIC_KEY=\"${{ secrets.PAYSTACK_PUBLIC_KEY }}\" \
            flexibug-beauty:latest
          
          # Wait for container to start
          sleep 10
          
          # Health check
          echo '🏥 Performing health check...'
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo '✅ Health check passed!'
            echo '🌐 Application is available at: http://${{ secrets.SERVER_HOST }}:8080'
          else
            echo '⚠️ Health check failed. Check container logs:'
            docker logs flexibug-beauty
            exit 1
          fi
        "

    - name: Show deployment status
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}
      run: |
        sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          echo '📊 Container Status:'
          docker ps --filter 'name=flexibug-beauty' --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
          echo ''
          echo '📋 Recent Logs:'
          docker logs --tail 20 flexibug-beauty
          echo ''
          echo '🧹 Cleaning up build files...'
          rm -rf /tmp/flexibug-beauty
        "